// node_modules/admin-lte/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js
if ("undefined" == typeof jQuery)
  throw new Error("Tempus Dominus Bootstrap4's requires jQuery. jQuery must be included before Tempus Dominus Bootstrap4's JavaScript.");
if (!function() {
  var t = jQuery.fn.jquery.split(" ")[0].split(".");
  if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || 4 <= t[0])
    throw new Error("Tempus Dominus Bootstrap4's requires at least jQuery v3.0.0 but less than v4.0.0");
}(), "undefined" == typeof moment)
  throw new Error("Tempus Dominus Bootstrap4's requires moment.js. Moment.js must be included before Tempus Dominus Bootstrap4's JavaScript.");
var version = moment.version.split(".");
if (version[0] <= 2 && version[1] < 17 || 3 <= version[0])
  throw new Error("Tempus Dominus Bootstrap4's requires at least moment.js v2.17.0 but less than v3.0.0");
!function() {
  function s(t2, e) {
    for (var i2 = 0; i2 < e.length; i2++) {
      var s2 = e[i2];
      s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t2, s2.key, s2);
    }
  }
  var a, n, o, r, d, h, l, c, u, _, f, m, w, g, i, b, v, M = (a = jQuery, n = moment, l = { DATA_TOGGLE: '[data-toggle="' + (r = o = "datetimepicker") + '"]' }, c = { INPUT: o + "-input" }, u = { CHANGE: "change" + (d = "." + r), BLUR: "blur" + d, KEYUP: "keyup" + d, KEYDOWN: "keydown" + d, FOCUS: "focus" + d, CLICK_DATA_API: "click" + d + (h = ".data-api"), UPDATE: "update" + d, ERROR: "error" + d, HIDE: "hide" + d, SHOW: "show" + d }, _ = [{ CLASS_NAME: "days", NAV_FUNCTION: "M", NAV_STEP: 1 }, { CLASS_NAME: "months", NAV_FUNCTION: "y", NAV_STEP: 1 }, { CLASS_NAME: "years", NAV_FUNCTION: "y", NAV_STEP: 10 }, { CLASS_NAME: "decades", NAV_FUNCTION: "y", NAV_STEP: 100 }], f = { up: 38, 38: "up", down: 40, 40: "down", left: 37, 37: "left", right: 39, 39: "right", tab: 9, 9: "tab", escape: 27, 27: "escape", enter: 13, 13: "enter", pageUp: 33, 33: "pageUp", pageDown: 34, 34: "pageDown", shift: 16, 16: "shift", control: 17, 17: "control", space: 32, 32: "space", t: 84, 84: "t", delete: 46, 46: "delete" }, m = ["times", "days", "months", "years", "decades"], v = { timeZone: "", format: !(b = { time: "clock", date: "calendar", up: "arrow-up", down: "arrow-down", previous: "arrow-left", next: "arrow-right", today: "arrow-down-circle", clear: "trash-2", close: "x" }), dayViewHeaderFormat: "MMMM YYYY", extraFormats: !(i = { timeZone: -39, format: -38, dayViewHeaderFormat: -37, extraFormats: -36, stepping: -35, minDate: -34, maxDate: -33, useCurrent: -32, collapse: -31, locale: -30, defaultDate: -29, disabledDates: -28, enabledDates: -27, icons: -26, tooltips: -25, useStrict: -24, sideBySide: -23, daysOfWeekDisabled: -22, calendarWeeks: -21, viewMode: -20, toolbarPlacement: -19, buttons: -18, widgetPositioning: -17, widgetParent: -16, ignoreReadonly: -15, keepOpen: -14, focusOnShow: -13, inline: -12, keepInvalid: -11, keyBinds: -10, debug: -9, allowInputToggle: -8, disabledTimeIntervals: -7, disabledHours: -6, enabledHours: -5, viewDate: -4, allowMultidate: -3, multidateSeparator: -2, updateOnlyThroughDateOption: -1, date: 1 }), stepping: 1, minDate: !(g = {}), maxDate: !(w = {}), useCurrent: true, collapse: true, locale: n.locale(), defaultDate: false, disabledDates: false, enabledDates: false, icons: { type: "class", time: "fa fa-clock-o", date: "fa fa-calendar", up: "fa fa-arrow-up", down: "fa fa-arrow-down", previous: "fa fa-chevron-left", next: "fa fa-chevron-right", today: "fa fa-calendar-check-o", clear: "fa fa-trash", close: "fa fa-times" }, tooltips: { today: "Go to today", clear: "Clear selection", close: "Close the picker", selectMonth: "Select Month", prevMonth: "Previous Month", nextMonth: "Next Month", selectYear: "Select Year", prevYear: "Previous Year", nextYear: "Next Year", selectDecade: "Select Decade", prevDecade: "Previous Decade", nextDecade: "Next Decade", prevCentury: "Previous Century", nextCentury: "Next Century", pickHour: "Pick Hour", incrementHour: "Increment Hour", decrementHour: "Decrement Hour", pickMinute: "Pick Minute", incrementMinute: "Increment Minute", decrementMinute: "Decrement Minute", pickSecond: "Pick Second", incrementSecond: "Increment Second", decrementSecond: "Decrement Second", togglePeriod: "Toggle Period", selectTime: "Select Time", selectDate: "Select Date" }, useStrict: false, sideBySide: false, daysOfWeekDisabled: false, calendarWeeks: false, viewMode: "days", toolbarPlacement: "default", buttons: { showToday: false, showClear: false, showClose: false }, widgetPositioning: { horizontal: "auto", vertical: "auto" }, widgetParent: null, readonly: false, ignoreReadonly: false, keepOpen: false, focusOnShow: true, inline: false, keepInvalid: false, keyBinds: { up: function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") ? this.date(t2.clone().subtract(7, "d")) : this.date(t2.clone().add(this.stepping(), "m")), true;
  }, down: function() {
    if (!this.widget)
      return this.show(), false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") ? this.date(t2.clone().add(7, "d")) : this.date(t2.clone().subtract(this.stepping(), "m")), true;
  }, "control up": function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") ? this.date(t2.clone().subtract(1, "y")) : this.date(t2.clone().add(1, "h")), true;
  }, "control down": function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") ? this.date(t2.clone().add(1, "y")) : this.date(t2.clone().subtract(1, "h")), true;
  }, left: function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") && this.date(t2.clone().subtract(1, "d")), true;
  }, right: function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") && this.date(t2.clone().add(1, "d")), true;
  }, pageUp: function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") && this.date(t2.clone().subtract(1, "M")), true;
  }, pageDown: function() {
    if (!this.widget)
      return false;
    var t2 = this._dates[0] || this.getMoment();
    return this.widget.find(".datepicker").is(":visible") && this.date(t2.clone().add(1, "M")), true;
  }, enter: function() {
    return !!this.widget && (this.hide(), true);
  }, escape: function() {
    return !!this.widget && (this.hide(), true);
  }, "control space": function() {
    return !!this.widget && (this.widget.find(".timepicker").is(":visible") && this.widget.find('.btn[data-action="togglePeriod"]').click(), true);
  }, t: function() {
    return !!this.widget && (this.date(this.getMoment()), true);
  }, delete: function() {
    return !!this.widget && (this.clear(), true);
  } }, debug: false, allowInputToggle: false, disabledTimeIntervals: false, disabledHours: false, enabledHours: false, viewDate: false, allowMultidate: false, multidateSeparator: ", ", updateOnlyThroughDateOption: false, promptTimeOnDateChange: false, promptTimeOnDateChangeTransitionDelay: 200 }, function() {
    function p2(t3, e2) {
      this._options = this._getOptions(e2), this._element = t3, this._dates = [], this._datesFormatted = [], this._viewDate = null, this.unset = true, this.component = false, this.widget = false, this.use24Hours = null, this.actualFormat = null, this.parseFormats = null, this.currentViewMode = null, this.MinViewModeNumber = 0, this.isInitFormatting = false, this.isInit = false, this.isDateUpdateThroughDateOptionFromClientCode = false, this.hasInitDate = false, this.initDate = void 0, this._notifyChangeEventContext = void 0, this._currentPromptTimeTimeout = null, this._int();
    }
    var t2, e, i2 = p2.prototype;
    return i2._int = function() {
      this.isInit = true;
      var t3 = this._element.data("target-input");
      this._element.is("input") ? this.input = this._element : void 0 !== t3 && (this.input = "nearest" === t3 ? this._element.find("input") : a(t3)), this._dates = [], this._dates[0] = this.getMoment(), this._viewDate = this.getMoment().clone(), a.extend(true, this._options, this._dataToOptions()), this.hasInitDate = false, this.initDate = void 0, this.options(this._options), this.isInitFormatting = true, this._initFormatting(), this.isInitFormatting = false, void 0 !== this.input && this.input.is("input") && 0 !== this.input.val().trim().length ? this._setValue(this._parseInputDate(this.input.val().trim()), 0) : this._options.defaultDate && void 0 !== this.input && void 0 === this.input.attr("placeholder") && this._setValue(this._options.defaultDate, 0), this.hasInitDate && this.date(this.initDate), this._options.inline && this.show(), this.isInit = false;
    }, i2._update = function() {
      this.widget && (this._fillDate(), this._fillTime());
    }, i2._setValue = function(t3, e2) {
      var i3 = void 0 === e2, s2 = !t3 && i3, a2 = this.isDateUpdateThroughDateOptionFromClientCode, n2 = !this.isInit && this._options.updateOnlyThroughDateOption && !a2, o2 = "", r2 = false, d2 = this.unset ? null : this._dates[e2];
      if (!d2 && !this.unset && i3 && s2 && (d2 = this._dates[this._dates.length - 1]), !t3)
        return n2 ? void this._notifyEvent({ type: p2.Event.CHANGE, date: t3, oldDate: d2, isClear: s2, isInvalid: r2, isDateUpdateThroughDateOptionFromClientCode: a2, isInit: this.isInit }) : (!this._options.allowMultidate || 1 === this._dates.length || s2 ? (this.unset = true, this._dates = [], this._datesFormatted = []) : (o2 = "" + this._element.data("date") + this._options.multidateSeparator, o2 = d2 && o2.replace("" + d2.format(this.actualFormat) + this._options.multidateSeparator, "").replace("" + this._options.multidateSeparator + this._options.multidateSeparator, "").replace(new RegExp(this._options.multidateSeparator.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") + "\\s*$"), "") || "", this._dates.splice(e2, 1), this._datesFormatted.splice(e2, 1)), o2 = D(o2), void 0 !== this.input && (this.input.val(o2), this.input.trigger("input")), this._element.data("date", o2), this._notifyEvent({ type: p2.Event.CHANGE, date: false, oldDate: d2, isClear: s2, isInvalid: r2, isDateUpdateThroughDateOptionFromClientCode: a2, isInit: this.isInit }), void this._update());
      if (t3 = t3.clone().locale(this._options.locale), this._hasTimeZone() && t3.tz(this._options.timeZone), 1 !== this._options.stepping && t3.minutes(Math.round(t3.minutes() / this._options.stepping) * this._options.stepping).seconds(0), this._isValid(t3)) {
        if (n2)
          return void this._notifyEvent({ type: p2.Event.CHANGE, date: t3.clone(), oldDate: d2, isClear: s2, isInvalid: r2, isDateUpdateThroughDateOptionFromClientCode: a2, isInit: this.isInit });
        if (this._dates[e2] = t3, this._datesFormatted[e2] = t3.format("YYYY-MM-DD"), this._viewDate = t3.clone(), this._options.allowMultidate && 1 < this._dates.length) {
          for (var h2 = 0; h2 < this._dates.length; h2++)
            o2 += "" + this._dates[h2].format(this.actualFormat) + this._options.multidateSeparator;
          o2 = o2.replace(new RegExp(this._options.multidateSeparator + "\\s*$"), "");
        } else
          o2 = this._dates[e2].format(this.actualFormat);
        o2 = D(o2), void 0 !== this.input && (this.input.val(o2), this.input.trigger("input")), this._element.data("date", o2), this.unset = false, this._update(), this._notifyEvent({ type: p2.Event.CHANGE, date: this._dates[e2].clone(), oldDate: d2, isClear: s2, isInvalid: r2, isDateUpdateThroughDateOptionFromClientCode: a2, isInit: this.isInit });
      } else
        r2 = true, this._options.keepInvalid ? this._notifyEvent({ type: p2.Event.CHANGE, date: t3, oldDate: d2, isClear: s2, isInvalid: r2, isDateUpdateThroughDateOptionFromClientCode: a2, isInit: this.isInit }) : void 0 !== this.input && (this.input.val("" + (this.unset ? "" : this._dates[e2].format(this.actualFormat))), this.input.trigger("input")), this._notifyEvent({ type: p2.Event.ERROR, date: t3, oldDate: d2 });
    }, i2._change = function(t3) {
      var e2 = a(t3.target).val().trim(), i3 = e2 ? this._parseInputDate(e2) : null;
      return this._setValue(i3, 0), t3.stopImmediatePropagation(), false;
    }, i2._getOptions = function(t3) {
      return t3 = a.extend(true, {}, v, t3 && t3.icons && "feather" === t3.icons.type ? { icons: b } : {}, t3);
    }, i2._hasTimeZone = function() {
      return void 0 !== n.tz && void 0 !== this._options.timeZone && null !== this._options.timeZone && "" !== this._options.timeZone;
    }, i2._isEnabled = function(t3) {
      if ("string" != typeof t3 || 1 < t3.length)
        throw new TypeError("isEnabled expects a single character string parameter");
      switch (t3) {
        case "y":
          return -1 !== this.actualFormat.indexOf("Y");
        case "M":
          return -1 !== this.actualFormat.indexOf("M");
        case "d":
          return -1 !== this.actualFormat.toLowerCase().indexOf("d");
        case "h":
        case "H":
          return -1 !== this.actualFormat.toLowerCase().indexOf("h");
        case "m":
          return -1 !== this.actualFormat.indexOf("m");
        case "s":
          return -1 !== this.actualFormat.indexOf("s");
        case "a":
        case "A":
          return -1 !== this.actualFormat.toLowerCase().indexOf("a");
        default:
          return false;
      }
    }, i2._hasTime = function() {
      return this._isEnabled("h") || this._isEnabled("m") || this._isEnabled("s");
    }, i2._hasDate = function() {
      return this._isEnabled("y") || this._isEnabled("M") || this._isEnabled("d");
    }, i2._dataToOptions = function() {
      var i3 = this._element.data(), s2 = {};
      return i3.dateOptions && i3.dateOptions instanceof Object && (s2 = a.extend(true, s2, i3.dateOptions)), a.each(this._options, function(t3) {
        var e2 = "date" + t3.charAt(0).toUpperCase() + t3.slice(1);
        void 0 !== i3[e2] ? s2[t3] = i3[e2] : delete s2[t3];
      }), s2;
    }, i2._format = function() {
      return this._options.format || "YYYY-MM-DD HH:mm";
    }, i2._areSameDates = function(t3, e2) {
      var i3 = this._format();
      return t3 && e2 && (t3.isSame(e2) || n(t3.format(i3), i3).isSame(n(e2.format(i3), i3)));
    }, i2._notifyEvent = function(t3) {
      if (t3.type === p2.Event.CHANGE) {
        if (this._notifyChangeEventContext = this._notifyChangeEventContext || 0, this._notifyChangeEventContext++, t3.date && this._areSameDates(t3.date, t3.oldDate) || !t3.isClear && !t3.date && !t3.oldDate || 1 < this._notifyChangeEventContext)
          return void (this._notifyChangeEventContext = void 0);
        this._handlePromptTimeIfNeeded(t3);
      }
      this._element.trigger(t3), this._notifyChangeEventContext = void 0;
    }, i2._handlePromptTimeIfNeeded = function(t3) {
      if (this._options.promptTimeOnDateChange) {
        if (!t3.oldDate && this._options.useCurrent)
          return;
        if (t3.oldDate && t3.date && (t3.oldDate.format("YYYY-MM-DD") === t3.date.format("YYYY-MM-DD") || t3.oldDate.format("YYYY-MM-DD") !== t3.date.format("YYYY-MM-DD") && t3.oldDate.format("HH:mm:ss") !== t3.date.format("HH:mm:ss")))
          return;
        var e2 = this;
        clearTimeout(this._currentPromptTimeTimeout), this._currentPromptTimeTimeout = setTimeout(function() {
          e2.widget && e2.widget.find('[data-action="togglePicker"]').click();
        }, this._options.promptTimeOnDateChangeTransitionDelay);
      }
    }, i2._viewUpdate = function(t3) {
      "y" === t3 && (t3 = "YYYY"), this._notifyEvent({ type: p2.Event.UPDATE, change: t3, viewDate: this._viewDate.clone() });
    }, i2._showMode = function(t3) {
      this.widget && (t3 && (this.currentViewMode = Math.max(this.MinViewModeNumber, Math.min(3, this.currentViewMode + t3))), this.widget.find(".datepicker > div").hide().filter(".datepicker-" + _[this.currentViewMode].CLASS_NAME).show());
    }, i2._isInDisabledDates = function(t3) {
      return true === this._options.disabledDates[t3.format("YYYY-MM-DD")];
    }, i2._isInEnabledDates = function(t3) {
      return true === this._options.enabledDates[t3.format("YYYY-MM-DD")];
    }, i2._isInDisabledHours = function(t3) {
      return true === this._options.disabledHours[t3.format("H")];
    }, i2._isInEnabledHours = function(t3) {
      return true === this._options.enabledHours[t3.format("H")];
    }, i2._isValid = function(t3, e2) {
      if (!t3 || !t3.isValid())
        return false;
      if (this._options.disabledDates && "d" === e2 && this._isInDisabledDates(t3))
        return false;
      if (this._options.enabledDates && "d" === e2 && !this._isInEnabledDates(t3))
        return false;
      if (this._options.minDate && t3.isBefore(this._options.minDate, e2))
        return false;
      if (this._options.maxDate && t3.isAfter(this._options.maxDate, e2))
        return false;
      if (this._options.daysOfWeekDisabled && "d" === e2 && -1 !== this._options.daysOfWeekDisabled.indexOf(t3.day()))
        return false;
      if (this._options.disabledHours && ("h" === e2 || "m" === e2 || "s" === e2) && this._isInDisabledHours(t3))
        return false;
      if (this._options.enabledHours && ("h" === e2 || "m" === e2 || "s" === e2) && !this._isInEnabledHours(t3))
        return false;
      if (this._options.disabledTimeIntervals && ("h" === e2 || "m" === e2 || "s" === e2)) {
        var i3 = false;
        if (a.each(this._options.disabledTimeIntervals, function() {
          if (t3.isBetween(this[0], this[1]))
            return !(i3 = true);
        }), i3)
          return false;
      }
      return true;
    }, i2._parseInputDate = function(t3, e2) {
      var i3 = (void 0 === e2 ? {} : e2).isPickerShow, s2 = void 0 !== i3 && i3;
      return void 0 === this._options.parseInputDate || s2 ? n.isMoment(t3) || (t3 = this.getMoment(t3)) : t3 = this._options.parseInputDate(t3), t3;
    }, i2._keydown = function(t3) {
      var e2, i3, s2, a2, n2 = null, o2 = [], r2 = {}, d2 = t3.which;
      for (e2 in w[d2] = "p", w)
        w.hasOwnProperty(e2) && "p" === w[e2] && (o2.push(e2), parseInt(e2, 10) !== d2 && (r2[e2] = true));
      for (e2 in this._options.keyBinds)
        if (this._options.keyBinds.hasOwnProperty(e2) && "function" == typeof this._options.keyBinds[e2] && (s2 = e2.split(" ")).length === o2.length && f[d2] === s2[s2.length - 1]) {
          for (a2 = true, i3 = s2.length - 2; 0 <= i3; i3--)
            if (!(f[s2[i3]] in r2)) {
              a2 = false;
              break;
            }
          if (a2) {
            n2 = this._options.keyBinds[e2];
            break;
          }
        }
      n2 && n2.call(this) && (t3.stopPropagation(), t3.preventDefault());
    }, i2._keyup = function(t3) {
      w[t3.which] = "r", g[t3.which] && (g[t3.which] = false, t3.stopPropagation(), t3.preventDefault());
    }, i2._indexGivenDates = function(t3) {
      var e2 = {}, i3 = this;
      return a.each(t3, function() {
        var t4 = i3._parseInputDate(this);
        t4.isValid() && (e2[t4.format("YYYY-MM-DD")] = true);
      }), !!Object.keys(e2).length && e2;
    }, i2._indexGivenHours = function(t3) {
      var e2 = {};
      return a.each(t3, function() {
        e2[this] = true;
      }), !!Object.keys(e2).length && e2;
    }, i2._initFormatting = function() {
      var t3 = this._options.format || "L LT", e2 = this;
      this.actualFormat = t3.replace(/(\[[^\[]*])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function(t4) {
        return (e2.isInitFormatting && null === e2._options.date ? e2.getMoment() : e2._dates[0]).localeData().longDateFormat(t4) || t4;
      }), this.parseFormats = this._options.extraFormats ? this._options.extraFormats.slice() : [], this.parseFormats.indexOf(t3) < 0 && this.parseFormats.indexOf(this.actualFormat) < 0 && this.parseFormats.push(this.actualFormat), this.use24Hours = this.actualFormat.toLowerCase().indexOf("a") < 1 && this.actualFormat.replace(/\[.*?]/g, "").indexOf("h") < 1, this._isEnabled("y") && (this.MinViewModeNumber = 2), this._isEnabled("M") && (this.MinViewModeNumber = 1), this._isEnabled("d") && (this.MinViewModeNumber = 0), this.currentViewMode = Math.max(this.MinViewModeNumber, this.currentViewMode), this.unset || this._setValue(this._dates[0], 0);
    }, i2._getLastPickedDate = function() {
      var t3 = this._dates[this._getLastPickedDateIndex()];
      return !t3 && this._options.allowMultidate && (t3 = n(/* @__PURE__ */ new Date())), t3;
    }, i2._getLastPickedDateIndex = function() {
      return this._dates.length - 1;
    }, i2.getMoment = function(t3) {
      var e2 = null == t3 ? n().clone().locale(this._options.locale) : this._hasTimeZone() ? n.tz(t3, this.parseFormats, this._options.locale, this._options.useStrict, this._options.timeZone) : n(t3, this.parseFormats, this._options.locale, this._options.useStrict);
      return this._hasTimeZone() && e2.tz(this._options.timeZone), e2;
    }, i2.toggle = function() {
      return this.widget ? this.hide() : this.show();
    }, i2.readonly = function(t3) {
      if (0 === arguments.length)
        return this._options.readonly;
      if ("boolean" != typeof t3)
        throw new TypeError("readonly() expects a boolean parameter");
      this._options.readonly = t3, void 0 !== this.input && this.input.prop("readonly", this._options.readonly), this.widget && (this.hide(), this.show());
    }, i2.ignoreReadonly = function(t3) {
      if (0 === arguments.length)
        return this._options.ignoreReadonly;
      if ("boolean" != typeof t3)
        throw new TypeError("ignoreReadonly() expects a boolean parameter");
      this._options.ignoreReadonly = t3;
    }, i2.options = function(t3) {
      if (0 === arguments.length)
        return a.extend(true, {}, this._options);
      if (!(t3 instanceof Object))
        throw new TypeError("options() this.options parameter should be an object");
      a.extend(true, this._options, t3);
      var s2 = this, e2 = Object.keys(this._options).sort(k);
      a.each(e2, function(t4, e3) {
        var i3 = s2._options[e3];
        if (void 0 !== s2[e3]) {
          if (s2.isInit && "date" === e3)
            return s2.hasInitDate = true, void (s2.initDate = i3);
          s2[e3](i3);
        }
      });
    }, i2.date = function(t3, e2) {
      if (e2 = e2 || 0, 0 === arguments.length)
        return this.unset ? null : this._options.allowMultidate ? this._dates.join(this._options.multidateSeparator) : this._dates[e2].clone();
      if (!(null === t3 || "string" == typeof t3 || n.isMoment(t3) || t3 instanceof Date))
        throw new TypeError("date() parameter must be one of [null, string, moment or Date]");
      "string" == typeof t3 && y(t3) && (t3 = new Date(t3)), this._setValue(null === t3 ? null : this._parseInputDate(t3), e2);
    }, i2.updateOnlyThroughDateOption = function(t3) {
      if ("boolean" != typeof t3)
        throw new TypeError("updateOnlyThroughDateOption() expects a boolean parameter");
      this._options.updateOnlyThroughDateOption = t3;
    }, i2.format = function(t3) {
      if (0 === arguments.length)
        return this._options.format;
      if ("string" != typeof t3 && ("boolean" != typeof t3 || false !== t3))
        throw new TypeError("format() expects a string or boolean:false parameter " + t3);
      this._options.format = t3, this.actualFormat && this._initFormatting();
    }, i2.timeZone = function(t3) {
      if (0 === arguments.length)
        return this._options.timeZone;
      if ("string" != typeof t3)
        throw new TypeError("newZone() expects a string parameter");
      this._options.timeZone = t3;
    }, i2.dayViewHeaderFormat = function(t3) {
      if (0 === arguments.length)
        return this._options.dayViewHeaderFormat;
      if ("string" != typeof t3)
        throw new TypeError("dayViewHeaderFormat() expects a string parameter");
      this._options.dayViewHeaderFormat = t3;
    }, i2.extraFormats = function(t3) {
      if (0 === arguments.length)
        return this._options.extraFormats;
      if (false !== t3 && !(t3 instanceof Array))
        throw new TypeError("extraFormats() expects an array or false parameter");
      this._options.extraFormats = t3, this.parseFormats && this._initFormatting();
    }, i2.disabledDates = function(t3) {
      if (0 === arguments.length)
        return this._options.disabledDates ? a.extend({}, this._options.disabledDates) : this._options.disabledDates;
      if (!t3)
        return this._options.disabledDates = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("disabledDates() expects an array parameter");
      this._options.disabledDates = this._indexGivenDates(t3), this._options.enabledDates = false, this._update();
    }, i2.enabledDates = function(t3) {
      if (0 === arguments.length)
        return this._options.enabledDates ? a.extend({}, this._options.enabledDates) : this._options.enabledDates;
      if (!t3)
        return this._options.enabledDates = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("enabledDates() expects an array parameter");
      this._options.enabledDates = this._indexGivenDates(t3), this._options.disabledDates = false, this._update();
    }, i2.daysOfWeekDisabled = function(t3) {
      if (0 === arguments.length)
        return this._options.daysOfWeekDisabled.splice(0);
      if ("boolean" == typeof t3 && !t3)
        return this._options.daysOfWeekDisabled = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("daysOfWeekDisabled() expects an array parameter");
      if (this._options.daysOfWeekDisabled = t3.reduce(function(t4, e3) {
        return 6 < (e3 = parseInt(e3, 10)) || e3 < 0 || isNaN(e3) || -1 === t4.indexOf(e3) && t4.push(e3), t4;
      }, []).sort(), this._options.useCurrent && !this._options.keepInvalid)
        for (var e2 = 0; e2 < this._dates.length; e2++) {
          for (var i3 = 0; !this._isValid(this._dates[e2], "d"); ) {
            if (this._dates[e2].add(1, "d"), 31 === i3)
              throw "Tried 31 times to find a valid date";
            i3++;
          }
          this._setValue(this._dates[e2], e2);
        }
      this._update();
    }, i2.maxDate = function(t3) {
      if (0 === arguments.length)
        return this._options.maxDate ? this._options.maxDate.clone() : this._options.maxDate;
      if ("boolean" == typeof t3 && false === t3)
        return this._options.maxDate = false, this._update(), true;
      "string" == typeof t3 && ("now" !== t3 && "moment" !== t3 || (t3 = this.getMoment()));
      var e2 = this._parseInputDate(t3);
      if (!e2.isValid())
        throw new TypeError("maxDate() Could not parse date parameter: " + t3);
      if (this._options.minDate && e2.isBefore(this._options.minDate))
        throw new TypeError("maxDate() date parameter is before this.options.minDate: " + e2.format(this.actualFormat));
      this._options.maxDate = e2;
      for (var i3 = 0; i3 < this._dates.length; i3++)
        this._options.useCurrent && !this._options.keepInvalid && this._dates[i3].isAfter(t3) && this._setValue(this._options.maxDate, i3);
      this._viewDate.isAfter(e2) && (this._viewDate = e2.clone().subtract(this._options.stepping, "m")), this._update();
    }, i2.minDate = function(t3) {
      if (0 === arguments.length)
        return this._options.minDate ? this._options.minDate.clone() : this._options.minDate;
      if ("boolean" == typeof t3 && false === t3)
        return this._options.minDate = false, this._update(), true;
      "string" == typeof t3 && ("now" !== t3 && "moment" !== t3 || (t3 = this.getMoment()));
      var e2 = this._parseInputDate(t3);
      if (!e2.isValid())
        throw new TypeError("minDate() Could not parse date parameter: " + t3);
      if (this._options.maxDate && e2.isAfter(this._options.maxDate))
        throw new TypeError("minDate() date parameter is after this.options.maxDate: " + e2.format(this.actualFormat));
      this._options.minDate = e2;
      for (var i3 = 0; i3 < this._dates.length; i3++)
        this._options.useCurrent && !this._options.keepInvalid && this._dates[i3].isBefore(t3) && this._setValue(this._options.minDate, i3);
      this._viewDate.isBefore(e2) && (this._viewDate = e2.clone().add(this._options.stepping, "m")), this._update();
    }, i2.defaultDate = function(t3) {
      if (0 === arguments.length)
        return this._options.defaultDate ? this._options.defaultDate.clone() : this._options.defaultDate;
      if (!t3)
        return !(this._options.defaultDate = false);
      "string" == typeof t3 && (t3 = "now" === t3 || "moment" === t3 ? this.getMoment() : this.getMoment(t3));
      var e2 = this._parseInputDate(t3);
      if (!e2.isValid())
        throw new TypeError("defaultDate() Could not parse date parameter: " + t3);
      if (!this._isValid(e2))
        throw new TypeError("defaultDate() date passed is invalid according to component setup validations");
      this._options.defaultDate = e2, (this._options.defaultDate && this._options.inline || void 0 !== this.input && "" === this.input.val().trim()) && this._setValue(this._options.defaultDate, 0);
    }, i2.locale = function(t3) {
      if (0 === arguments.length)
        return this._options.locale;
      if (!n.localeData(t3))
        throw new TypeError("locale() locale " + t3 + " is not loaded from moment locales!");
      this._options.locale = t3;
      for (var e2 = 0; e2 < this._dates.length; e2++)
        this._dates[e2].locale(this._options.locale);
      this._viewDate.locale(this._options.locale), this.actualFormat && this._initFormatting(), this.widget && (this.hide(), this.show());
    }, i2.stepping = function(t3) {
      if (0 === arguments.length)
        return this._options.stepping;
      t3 = parseInt(t3, 10), (isNaN(t3) || t3 < 1) && (t3 = 1), this._options.stepping = t3;
    }, i2.useCurrent = function(t3) {
      var e2 = ["year", "month", "day", "hour", "minute"];
      if (0 === arguments.length)
        return this._options.useCurrent;
      if ("boolean" != typeof t3 && "string" != typeof t3)
        throw new TypeError("useCurrent() expects a boolean or string parameter");
      if ("string" == typeof t3 && -1 === e2.indexOf(t3.toLowerCase()))
        throw new TypeError("useCurrent() expects a string parameter of " + e2.join(", "));
      this._options.useCurrent = t3;
    }, i2.collapse = function(t3) {
      if (0 === arguments.length)
        return this._options.collapse;
      if ("boolean" != typeof t3)
        throw new TypeError("collapse() expects a boolean parameter");
      if (this._options.collapse === t3)
        return true;
      this._options.collapse = t3, this.widget && (this.hide(), this.show());
    }, i2.icons = function(t3) {
      if (0 === arguments.length)
        return a.extend({}, this._options.icons);
      if (!(t3 instanceof Object))
        throw new TypeError("icons() expects parameter to be an Object");
      a.extend(this._options.icons, t3), this.widget && (this.hide(), this.show());
    }, i2.tooltips = function(t3) {
      if (0 === arguments.length)
        return a.extend({}, this._options.tooltips);
      if (!(t3 instanceof Object))
        throw new TypeError("tooltips() expects parameter to be an Object");
      a.extend(this._options.tooltips, t3), this.widget && (this.hide(), this.show());
    }, i2.useStrict = function(t3) {
      if (0 === arguments.length)
        return this._options.useStrict;
      if ("boolean" != typeof t3)
        throw new TypeError("useStrict() expects a boolean parameter");
      this._options.useStrict = t3;
    }, i2.sideBySide = function(t3) {
      if (0 === arguments.length)
        return this._options.sideBySide;
      if ("boolean" != typeof t3)
        throw new TypeError("sideBySide() expects a boolean parameter");
      this._options.sideBySide = t3, this.widget && (this.hide(), this.show());
    }, i2.viewMode = function(t3) {
      if (0 === arguments.length)
        return this._options.viewMode;
      if ("string" != typeof t3)
        throw new TypeError("viewMode() expects a string parameter");
      if (-1 === p2.ViewModes.indexOf(t3))
        throw new TypeError("viewMode() parameter must be one of (" + p2.ViewModes.join(", ") + ") value");
      this._options.viewMode = t3, this.currentViewMode = Math.max(p2.ViewModes.indexOf(t3) - 1, this.MinViewModeNumber), this._showMode();
    }, i2.calendarWeeks = function(t3) {
      if (0 === arguments.length)
        return this._options.calendarWeeks;
      if ("boolean" != typeof t3)
        throw new TypeError("calendarWeeks() expects parameter to be a boolean value");
      this._options.calendarWeeks = t3, this._update();
    }, i2.buttons = function(t3) {
      if (0 === arguments.length)
        return a.extend({}, this._options.buttons);
      if (!(t3 instanceof Object))
        throw new TypeError("buttons() expects parameter to be an Object");
      if (a.extend(this._options.buttons, t3), "boolean" != typeof this._options.buttons.showToday)
        throw new TypeError("buttons.showToday expects a boolean parameter");
      if ("boolean" != typeof this._options.buttons.showClear)
        throw new TypeError("buttons.showClear expects a boolean parameter");
      if ("boolean" != typeof this._options.buttons.showClose)
        throw new TypeError("buttons.showClose expects a boolean parameter");
      this.widget && (this.hide(), this.show());
    }, i2.keepOpen = function(t3) {
      if (0 === arguments.length)
        return this._options.keepOpen;
      if ("boolean" != typeof t3)
        throw new TypeError("keepOpen() expects a boolean parameter");
      this._options.keepOpen = t3;
    }, i2.focusOnShow = function(t3) {
      if (0 === arguments.length)
        return this._options.focusOnShow;
      if ("boolean" != typeof t3)
        throw new TypeError("focusOnShow() expects a boolean parameter");
      this._options.focusOnShow = t3;
    }, i2.inline = function(t3) {
      if (0 === arguments.length)
        return this._options.inline;
      if ("boolean" != typeof t3)
        throw new TypeError("inline() expects a boolean parameter");
      this._options.inline = t3;
    }, i2.clear = function() {
      this._setValue(null);
    }, i2.keyBinds = function(t3) {
      if (0 === arguments.length)
        return this._options.keyBinds;
      this._options.keyBinds = t3;
    }, i2.debug = function(t3) {
      if ("boolean" != typeof t3)
        throw new TypeError("debug() expects a boolean parameter");
      this._options.debug = t3;
    }, i2.allowInputToggle = function(t3) {
      if (0 === arguments.length)
        return this._options.allowInputToggle;
      if ("boolean" != typeof t3)
        throw new TypeError("allowInputToggle() expects a boolean parameter");
      this._options.allowInputToggle = t3;
    }, i2.keepInvalid = function(t3) {
      if (0 === arguments.length)
        return this._options.keepInvalid;
      if ("boolean" != typeof t3)
        throw new TypeError("keepInvalid() expects a boolean parameter");
      this._options.keepInvalid = t3;
    }, i2.datepickerInput = function(t3) {
      if (0 === arguments.length)
        return this._options.datepickerInput;
      if ("string" != typeof t3)
        throw new TypeError("datepickerInput() expects a string parameter");
      this._options.datepickerInput = t3;
    }, i2.parseInputDate = function(t3) {
      if (0 === arguments.length)
        return this._options.parseInputDate;
      if ("function" != typeof t3)
        throw new TypeError("parseInputDate() should be as function");
      this._options.parseInputDate = t3;
    }, i2.disabledTimeIntervals = function(t3) {
      if (0 === arguments.length)
        return this._options.disabledTimeIntervals ? a.extend({}, this._options.disabledTimeIntervals) : this._options.disabledTimeIntervals;
      if (!t3)
        return this._options.disabledTimeIntervals = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("disabledTimeIntervals() expects an array parameter");
      this._options.disabledTimeIntervals = t3, this._update();
    }, i2.disabledHours = function(t3) {
      if (0 === arguments.length)
        return this._options.disabledHours ? a.extend({}, this._options.disabledHours) : this._options.disabledHours;
      if (!t3)
        return this._options.disabledHours = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("disabledHours() expects an array parameter");
      if (this._options.disabledHours = this._indexGivenHours(t3), this._options.enabledHours = false, this._options.useCurrent && !this._options.keepInvalid)
        for (var e2 = 0; e2 < this._dates.length; e2++) {
          for (var i3 = 0; !this._isValid(this._dates[e2], "h"); ) {
            if (this._dates[e2].add(1, "h"), 24 === i3)
              throw "Tried 24 times to find a valid date";
            i3++;
          }
          this._setValue(this._dates[e2], e2);
        }
      this._update();
    }, i2.enabledHours = function(t3) {
      if (0 === arguments.length)
        return this._options.enabledHours ? a.extend({}, this._options.enabledHours) : this._options.enabledHours;
      if (!t3)
        return this._options.enabledHours = false, this._update(), true;
      if (!(t3 instanceof Array))
        throw new TypeError("enabledHours() expects an array parameter");
      if (this._options.enabledHours = this._indexGivenHours(t3), this._options.disabledHours = false, this._options.useCurrent && !this._options.keepInvalid)
        for (var e2 = 0; e2 < this._dates.length; e2++) {
          for (var i3 = 0; !this._isValid(this._dates[e2], "h"); ) {
            if (this._dates[e2].add(1, "h"), 24 === i3)
              throw "Tried 24 times to find a valid date";
            i3++;
          }
          this._setValue(this._dates[e2], e2);
        }
      this._update();
    }, i2.viewDate = function(t3) {
      if (0 === arguments.length)
        return this._viewDate.clone();
      if (!t3)
        return this._viewDate = (this._dates[0] || this.getMoment()).clone(), true;
      if (!("string" == typeof t3 || n.isMoment(t3) || t3 instanceof Date))
        throw new TypeError("viewDate() parameter must be one of [string, moment or Date]");
      this._viewDate = this._parseInputDate(t3), this._update(), this._viewUpdate(_[this.currentViewMode] && _[this.currentViewMode].NAV_FUNCTION);
    }, i2._fillDate = function() {
    }, i2._useFeatherIcons = function() {
      return "feather" === this._options.icons.type;
    }, i2.allowMultidate = function(t3) {
      if ("boolean" != typeof t3)
        throw new TypeError("allowMultidate() expects a boolean parameter");
      this._options.allowMultidate = t3;
    }, i2.multidateSeparator = function(t3) {
      if (0 === arguments.length)
        return this._options.multidateSeparator;
      if ("string" != typeof t3)
        throw new TypeError("multidateSeparator expects a string parameter");
      this._options.multidateSeparator = t3;
    }, t2 = p2, (e = [{ key: "NAME", get: function() {
      return o;
    } }, { key: "DATA_KEY", get: function() {
      return r;
    } }, { key: "EVENT_KEY", get: function() {
      return d;
    } }, { key: "DATA_API_KEY", get: function() {
      return h;
    } }, { key: "DatePickerModes", get: function() {
      return _;
    } }, { key: "ViewModes", get: function() {
      return m;
    } }, { key: "Event", get: function() {
      return u;
    } }, { key: "Selector", get: function() {
      return l;
    } }, { key: "Default", get: function() {
      return v;
    }, set: function(t3) {
      v = t3;
    } }, { key: "ClassName", get: function() {
      return c;
    } }]) && s(t2, e), p2;
  }());
  function y(t2) {
    return e = new Date(t2), "[object Date]" === Object.prototype.toString.call(e) && !isNaN(e.getTime());
    var e;
  }
  function D(t2) {
    return t2.replace(/(^\s+)|(\s+$)/g, "");
  }
  function k(t2, e) {
    return i[t2] && i[e] ? i[t2] < 0 && i[e] < 0 ? Math.abs(i[e]) - Math.abs(i[t2]) : i[t2] < 0 ? -1 : i[e] < 0 ? 1 : i[t2] - i[e] : i[t2] ? i[t2] : i[e] ? i[e] : 0;
  }
  var E, t, p, C, T, x;
  E = jQuery, t = E.fn[M.NAME], p = ["top", "bottom", "auto"], C = ["left", "right", "auto"], T = ["default", "top", "bottom"], x = function(d2) {
    var t2, e;
    function n2(t3, e2) {
      var i3 = d2.call(this, t3, e2) || this;
      return i3._init(), i3;
    }
    e = d2, (t2 = n2).prototype = Object.create(e.prototype), (t2.prototype.constructor = t2).__proto__ = e;
    var i2 = n2.prototype;
    return i2._init = function() {
      var t3;
      this._element.hasClass("input-group") && (0 === (t3 = this._element.find(".datepickerbutton")).length ? this.component = this._element.find('[data-toggle="datetimepicker"]') : this.component = t3);
    }, i2._iconTag = function(t3) {
      return "undefined" != typeof feather && this._useFeatherIcons() && feather.icons[t3] ? E("<span>").html(feather.icons[t3].toSvg()) : E("<span>").addClass(t3);
    }, i2._getDatePickerTemplate = function() {
      var t3 = E("<thead>").append(E("<tr>").append(E("<th>").addClass("prev").attr("data-action", "previous").append(this._iconTag(this._options.icons.previous))).append(E("<th>").addClass("picker-switch").attr("data-action", "pickerSwitch").attr("colspan", this._options.calendarWeeks ? "6" : "5")).append(E("<th>").addClass("next").attr("data-action", "next").append(this._iconTag(this._options.icons.next)))), e2 = E("<tbody>").append(E("<tr>").append(E("<td>").attr("colspan", this._options.calendarWeeks ? "8" : "7")));
      return [E("<div>").addClass("datepicker-days").append(E("<table>").addClass("table table-sm").append(t3).append(E("<tbody>"))), E("<div>").addClass("datepicker-months").append(E("<table>").addClass("table-condensed").append(t3.clone()).append(e2.clone())), E("<div>").addClass("datepicker-years").append(E("<table>").addClass("table-condensed").append(t3.clone()).append(e2.clone())), E("<div>").addClass("datepicker-decades").append(E("<table>").addClass("table-condensed").append(t3.clone()).append(e2.clone()))];
    }, i2._getTimePickerMainTemplate = function() {
      var t3 = E("<tr>"), e2 = E("<tr>"), i3 = E("<tr>");
      return this._isEnabled("h") && (t3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.incrementHour }).addClass("btn").attr("data-action", "incrementHours").append(this._iconTag(this._options.icons.up)))), e2.append(E("<td>").append(E("<span>").addClass("timepicker-hour").attr({ "data-time-component": "hours", title: this._options.tooltips.pickHour }).attr("data-action", "showHours"))), i3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.decrementHour }).addClass("btn").attr("data-action", "decrementHours").append(this._iconTag(this._options.icons.down))))), this._isEnabled("m") && (this._isEnabled("h") && (t3.append(E("<td>").addClass("separator")), e2.append(E("<td>").addClass("separator").html(":")), i3.append(E("<td>").addClass("separator"))), t3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.incrementMinute }).addClass("btn").attr("data-action", "incrementMinutes").append(this._iconTag(this._options.icons.up)))), e2.append(E("<td>").append(E("<span>").addClass("timepicker-minute").attr({ "data-time-component": "minutes", title: this._options.tooltips.pickMinute }).attr("data-action", "showMinutes"))), i3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.decrementMinute }).addClass("btn").attr("data-action", "decrementMinutes").append(this._iconTag(this._options.icons.down))))), this._isEnabled("s") && (this._isEnabled("m") && (t3.append(E("<td>").addClass("separator")), e2.append(E("<td>").addClass("separator").html(":")), i3.append(E("<td>").addClass("separator"))), t3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.incrementSecond }).addClass("btn").attr("data-action", "incrementSeconds").append(this._iconTag(this._options.icons.up)))), e2.append(E("<td>").append(E("<span>").addClass("timepicker-second").attr({ "data-time-component": "seconds", title: this._options.tooltips.pickSecond }).attr("data-action", "showSeconds"))), i3.append(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", title: this._options.tooltips.decrementSecond }).addClass("btn").attr("data-action", "decrementSeconds").append(this._iconTag(this._options.icons.down))))), this.use24Hours || (t3.append(E("<td>").addClass("separator")), e2.append(E("<td>").append(E("<button>").addClass("btn btn-primary").attr({ "data-action": "togglePeriod", tabindex: "-1", title: this._options.tooltips.togglePeriod }))), i3.append(E("<td>").addClass("separator"))), E("<div>").addClass("timepicker-picker").append(E("<table>").addClass("table-condensed").append([t3, e2, i3]));
    }, i2._getTimePickerTemplate = function() {
      var t3 = E("<div>").addClass("timepicker-hours").append(E("<table>").addClass("table-condensed")), e2 = E("<div>").addClass("timepicker-minutes").append(E("<table>").addClass("table-condensed")), i3 = E("<div>").addClass("timepicker-seconds").append(E("<table>").addClass("table-condensed")), s2 = [this._getTimePickerMainTemplate()];
      return this._isEnabled("h") && s2.push(t3), this._isEnabled("m") && s2.push(e2), this._isEnabled("s") && s2.push(i3), s2;
    }, i2._getToolbar = function() {
      var t3, e2, i3 = [];
      return this._options.buttons.showToday && i3.push(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", "data-action": "today", title: this._options.tooltips.today }).append(this._iconTag(this._options.icons.today)))), !this._options.sideBySide && this._options.collapse && this._hasDate() && this._hasTime() && (e2 = "times" === this._options.viewMode ? (t3 = this._options.tooltips.selectDate, this._options.icons.date) : (t3 = this._options.tooltips.selectTime, this._options.icons.time), i3.push(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", "data-action": "togglePicker", title: t3 }).append(this._iconTag(e2))))), this._options.buttons.showClear && i3.push(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", "data-action": "clear", title: this._options.tooltips.clear }).append(this._iconTag(this._options.icons.clear)))), this._options.buttons.showClose && i3.push(E("<td>").append(E("<a>").attr({ href: "#", tabindex: "-1", "data-action": "close", title: this._options.tooltips.close }).append(this._iconTag(this._options.icons.close)))), 0 === i3.length ? "" : E("<table>").addClass("table-condensed").append(E("<tbody>").append(E("<tr>").append(i3)));
    }, i2._getTemplate = function() {
      var t3 = E("<div>").addClass(("bootstrap-datetimepicker-widget dropdown-menu " + (this._options.calendarWeeks ? "tempusdominus-bootstrap-datetimepicker-widget-with-calendar-weeks" : "") + " " + (this._useFeatherIcons() ? "tempusdominus-bootstrap-datetimepicker-widget-with-feather-icons" : "") + " ").trim()), e2 = E("<div>").addClass("datepicker").append(this._getDatePickerTemplate()), i3 = E("<div>").addClass("timepicker").append(this._getTimePickerTemplate()), s2 = E("<ul>").addClass("list-unstyled"), a2 = E("<li>").addClass(("picker-switch" + (this._options.collapse ? " accordion-toggle" : "") + " " + (this._useFeatherIcons() ? "picker-switch-with-feathers-icons" : "")).trim()).append(this._getToolbar());
      return this._options.inline && t3.removeClass("dropdown-menu"), this.use24Hours && t3.addClass("usetwentyfour"), (void 0 !== this.input && this.input.prop("readonly") || this._options.readonly) && t3.addClass("bootstrap-datetimepicker-widget-readonly"), this._isEnabled("s") && !this.use24Hours && t3.addClass("wider"), this._options.sideBySide && this._hasDate() && this._hasTime() ? (t3.addClass("timepicker-sbs"), "top" === this._options.toolbarPlacement && t3.append(a2), t3.append(E("<div>").addClass("row").append(e2.addClass("col-md-6")).append(i3.addClass("col-md-6"))), "bottom" !== this._options.toolbarPlacement && "default" !== this._options.toolbarPlacement || t3.append(a2), t3) : ("top" === this._options.toolbarPlacement && s2.append(a2), this._hasDate() && s2.append(E("<li>").addClass(this._options.collapse && this._hasTime() ? "collapse" : "").addClass(this._options.collapse && this._hasTime() && "times" === this._options.viewMode ? "" : "show").append(e2)), "default" === this._options.toolbarPlacement && s2.append(a2), this._hasTime() && s2.append(E("<li>").addClass(this._options.collapse && this._hasDate() ? "collapse" : "").addClass(this._options.collapse && this._hasDate() && "times" === this._options.viewMode ? "show" : "").append(i3)), "bottom" === this._options.toolbarPlacement && s2.append(a2), t3.append(s2));
    }, i2._place = function(t3) {
      var e2, i3 = t3 && t3.data && t3.data.picker || this, s2 = i3._options.widgetPositioning.vertical, a2 = i3._options.widgetPositioning.horizontal, n3 = (i3.component && i3.component.length ? i3.component : i3._element).position(), o2 = (i3.component && i3.component.length ? i3.component : i3._element).offset();
      if (i3._options.widgetParent)
        e2 = i3._options.widgetParent.append(i3.widget);
      else if (i3._element.is("input"))
        e2 = i3._element.after(i3.widget).parent();
      else {
        if (i3._options.inline)
          return void (e2 = i3._element.append(i3.widget));
        e2 = i3._element, i3._element.children().first().after(i3.widget);
      }
      if ("auto" === s2 && (s2 = o2.top + 1.5 * i3.widget.height() >= E(window).height() + E(window).scrollTop() && i3.widget.height() + i3._element.outerHeight() < o2.top ? "top" : "bottom"), "auto" === a2 && (a2 = e2.width() < o2.left + i3.widget.outerWidth() / 2 && o2.left + i3.widget.outerWidth() > E(window).width() ? "right" : "left"), "top" === s2 ? i3.widget.addClass("top").removeClass("bottom") : i3.widget.addClass("bottom").removeClass("top"), "right" === a2 ? i3.widget.addClass("float-right") : i3.widget.removeClass("float-right"), "relative" !== e2.css("position") && (e2 = e2.parents().filter(function() {
        return "relative" === E(this).css("position");
      }).first()), 0 === e2.length)
        throw new Error("datetimepicker component should be placed within a relative positioned container");
      i3.widget.css({ top: "top" === s2 ? "auto" : n3.top + i3._element.outerHeight() + "px", bottom: "top" === s2 ? e2.outerHeight() - (e2 === i3._element ? 0 : n3.top) + "px" : "auto", left: "left" === a2 ? (e2 === i3._element ? 0 : n3.left) + "px" : "auto", right: "left" === a2 ? "auto" : e2.outerWidth() - i3._element.outerWidth() - (e2 === i3._element ? 0 : n3.left) + "px" });
    }, i2._fillDow = function() {
      var t3 = E("<tr>"), e2 = this._viewDate.clone().startOf("w").startOf("d");
      for (true === this._options.calendarWeeks && t3.append(E("<th>").addClass("cw").text("#")); e2.isBefore(this._viewDate.clone().endOf("w")); )
        t3.append(E("<th>").addClass("dow").text(e2.format("dd"))), e2.add(1, "d");
      this.widget.find(".datepicker-days thead").append(t3);
    }, i2._fillMonths = function() {
      for (var t3 = [], e2 = this._viewDate.clone().startOf("y").startOf("d"); e2.isSame(this._viewDate, "y"); )
        t3.push(E("<span>").attr("data-action", "selectMonth").addClass("month").text(e2.format("MMM"))), e2.add(1, "M");
      this.widget.find(".datepicker-months td").empty().append(t3);
    }, i2._updateMonths = function() {
      var t3 = this.widget.find(".datepicker-months"), e2 = t3.find("th"), i3 = t3.find("tbody").find("span"), s2 = this, a2 = this._getLastPickedDate();
      e2.eq(0).find("span").attr("title", this._options.tooltips.prevYear), e2.eq(1).attr("title", this._options.tooltips.selectYear), e2.eq(2).find("span").attr("title", this._options.tooltips.nextYear), t3.find(".disabled").removeClass("disabled"), this._isValid(this._viewDate.clone().subtract(1, "y"), "y") || e2.eq(0).addClass("disabled"), e2.eq(1).text(this._viewDate.year()), this._isValid(this._viewDate.clone().add(1, "y"), "y") || e2.eq(2).addClass("disabled"), i3.removeClass("active"), a2 && a2.isSame(this._viewDate, "y") && !this.unset && i3.eq(a2.month()).addClass("active"), i3.each(function(t4) {
        s2._isValid(s2._viewDate.clone().month(t4), "M") || E(this).addClass("disabled");
      });
    }, i2._getStartEndYear = function(t3, e2) {
      var i3 = t3 / 10, s2 = Math.floor(e2 / t3) * t3;
      return [s2, s2 + 9 * i3, Math.floor(e2 / i3) * i3];
    }, i2._updateYears = function() {
      var t3 = this.widget.find(".datepicker-years"), e2 = t3.find("th"), i3 = this._getStartEndYear(10, this._viewDate.year()), s2 = this._viewDate.clone().year(i3[0]), a2 = this._viewDate.clone().year(i3[1]), n3 = "";
      for (e2.eq(0).find("span").attr("title", this._options.tooltips.prevDecade), e2.eq(1).attr("title", this._options.tooltips.selectDecade), e2.eq(2).find("span").attr("title", this._options.tooltips.nextDecade), t3.find(".disabled").removeClass("disabled"), this._options.minDate && this._options.minDate.isAfter(s2, "y") && e2.eq(0).addClass("disabled"), e2.eq(1).text(s2.year() + "-" + a2.year()), this._options.maxDate && this._options.maxDate.isBefore(a2, "y") && e2.eq(2).addClass("disabled"), n3 += '<span data-action="selectYear" class="year old' + (this._isValid(s2, "y") ? "" : " disabled") + '">' + (s2.year() - 1) + "</span>"; !s2.isAfter(a2, "y"); )
        n3 += '<span data-action="selectYear" class="year' + (s2.isSame(this._getLastPickedDate(), "y") && !this.unset ? " active" : "") + (this._isValid(s2, "y") ? "" : " disabled") + '">' + s2.year() + "</span>", s2.add(1, "y");
      n3 += '<span data-action="selectYear" class="year old' + (this._isValid(s2, "y") ? "" : " disabled") + '">' + s2.year() + "</span>", t3.find("td").html(n3);
    }, i2._updateDecades = function() {
      var t3, e2 = this.widget.find(".datepicker-decades"), i3 = e2.find("th"), s2 = this._getStartEndYear(100, this._viewDate.year()), a2 = this._viewDate.clone().year(s2[0]), n3 = this._viewDate.clone().year(s2[1]), o2 = this._getLastPickedDate(), r2 = false, d3 = false, h2 = "";
      for (i3.eq(0).find("span").attr("title", this._options.tooltips.prevCentury), i3.eq(2).find("span").attr("title", this._options.tooltips.nextCentury), e2.find(".disabled").removeClass("disabled"), (0 === a2.year() || this._options.minDate && this._options.minDate.isAfter(a2, "y")) && i3.eq(0).addClass("disabled"), i3.eq(1).text(a2.year() + "-" + n3.year()), this._options.maxDate && this._options.maxDate.isBefore(n3, "y") && i3.eq(2).addClass("disabled"), a2.year() - 10 < 0 ? h2 += "<span>&nbsp;</span>" : h2 += '<span data-action="selectDecade" class="decade old" data-selection="' + (a2.year() + 6) + '">' + (a2.year() - 10) + "</span>"; !a2.isAfter(n3, "y"); )
        t3 = a2.year() + 11, r2 = this._options.minDate && this._options.minDate.isAfter(a2, "y") && this._options.minDate.year() <= t3, d3 = this._options.maxDate && this._options.maxDate.isAfter(a2, "y") && this._options.maxDate.year() <= t3, h2 += '<span data-action="selectDecade" class="decade' + (o2 && o2.isAfter(a2) && o2.year() <= t3 ? " active" : "") + (this._isValid(a2, "y") || r2 || d3 ? "" : " disabled") + '" data-selection="' + (a2.year() + 6) + '">' + a2.year() + "</span>", a2.add(10, "y");
      h2 += '<span data-action="selectDecade" class="decade old" data-selection="' + (a2.year() + 6) + '">' + a2.year() + "</span>", e2.find("td").html(h2);
    }, i2._fillDate = function() {
      d2.prototype._fillDate.call(this);
      var t3, e2, i3, s2, a2, n3 = this.widget.find(".datepicker-days"), o2 = n3.find("th"), r2 = [];
      if (this._hasDate()) {
        for (o2.eq(0).find("span").attr("title", this._options.tooltips.prevMonth), o2.eq(1).attr("title", this._options.tooltips.selectMonth), o2.eq(2).find("span").attr("title", this._options.tooltips.nextMonth), n3.find(".disabled").removeClass("disabled"), o2.eq(1).text(this._viewDate.format(this._options.dayViewHeaderFormat)), this._isValid(this._viewDate.clone().subtract(1, "M"), "M") || o2.eq(0).addClass("disabled"), this._isValid(this._viewDate.clone().add(1, "M"), "M") || o2.eq(2).addClass("disabled"), t3 = this._viewDate.clone().startOf("M").startOf("w").startOf("d"), s2 = 0; s2 < 42; s2++) {
          0 === t3.weekday() && (e2 = E("<tr>"), this._options.calendarWeeks && e2.append('<td class="cw">' + t3.week() + "</td>"), r2.push(e2)), i3 = "", t3.isBefore(this._viewDate, "M") && (i3 += " old"), t3.isAfter(this._viewDate, "M") && (i3 += " new"), this._options.allowMultidate ? -1 !== (a2 = this._datesFormatted.indexOf(t3.format("YYYY-MM-DD"))) && t3.isSame(this._datesFormatted[a2], "d") && !this.unset && (i3 += " active") : t3.isSame(this._getLastPickedDate(), "d") && !this.unset && (i3 += " active"), this._isValid(t3, "d") || (i3 += " disabled"), t3.isSame(this.getMoment(), "d") && (i3 += " today"), 0 !== t3.day() && 6 !== t3.day() || (i3 += " weekend"), e2.append('<td data-action="selectDay" data-day="' + t3.format("L") + '" class="day' + i3 + '">' + t3.date() + "</td>"), t3.add(1, "d");
        }
        E("body").addClass("tempusdominus-bootstrap-datetimepicker-widget-day-click"), E("body").append('<div class="tempusdominus-bootstrap-datetimepicker-widget-day-click-glass-panel"></div>'), n3.find("tbody").empty().append(r2), E("body").find(".tempusdominus-bootstrap-datetimepicker-widget-day-click-glass-panel").remove(), E("body").removeClass("tempusdominus-bootstrap-datetimepicker-widget-day-click"), this._updateMonths(), this._updateYears(), this._updateDecades();
      }
    }, i2._fillHours = function() {
      var t3 = this.widget.find(".timepicker-hours table"), e2 = this._viewDate.clone().startOf("d"), i3 = [], s2 = E("<tr>");
      for (11 < this._viewDate.hour() && !this.use24Hours && e2.hour(12); e2.isSame(this._viewDate, "d") && (this.use24Hours || this._viewDate.hour() < 12 && e2.hour() < 12 || 11 < this._viewDate.hour()); )
        e2.hour() % 4 == 0 && (s2 = E("<tr>"), i3.push(s2)), s2.append('<td data-action="selectHour" class="hour' + (this._isValid(e2, "h") ? "" : " disabled") + '">' + e2.format(this.use24Hours ? "HH" : "hh") + "</td>"), e2.add(1, "h");
      t3.empty().append(i3);
    }, i2._fillMinutes = function() {
      for (var t3 = this.widget.find(".timepicker-minutes table"), e2 = this._viewDate.clone().startOf("h"), i3 = [], s2 = 1 === this._options.stepping ? 5 : this._options.stepping, a2 = E("<tr>"); this._viewDate.isSame(e2, "h"); )
        e2.minute() % (4 * s2) == 0 && (a2 = E("<tr>"), i3.push(a2)), a2.append('<td data-action="selectMinute" class="minute' + (this._isValid(e2, "m") ? "" : " disabled") + '">' + e2.format("mm") + "</td>"), e2.add(s2, "m");
      t3.empty().append(i3);
    }, i2._fillSeconds = function() {
      for (var t3 = this.widget.find(".timepicker-seconds table"), e2 = this._viewDate.clone().startOf("m"), i3 = [], s2 = E("<tr>"); this._viewDate.isSame(e2, "m"); )
        e2.second() % 20 == 0 && (s2 = E("<tr>"), i3.push(s2)), s2.append('<td data-action="selectSecond" class="second' + (this._isValid(e2, "s") ? "" : " disabled") + '">' + e2.format("ss") + "</td>"), e2.add(5, "s");
      t3.empty().append(i3);
    }, i2._fillTime = function() {
      var t3, e2, i3 = this.widget.find(".timepicker span[data-time-component]"), s2 = this._getLastPickedDate();
      this.use24Hours || (t3 = this.widget.find(".timepicker [data-action=togglePeriod]"), e2 = s2 ? s2.clone().add(12 <= s2.hours() ? -12 : 12, "h") : void 0, s2 && t3.text(s2.format("A")), this._isValid(e2, "h") ? t3.removeClass("disabled") : t3.addClass("disabled")), s2 && i3.filter("[data-time-component=hours]").text(s2.format(this.use24Hours ? "HH" : "hh")), s2 && i3.filter("[data-time-component=minutes]").text(s2.format("mm")), s2 && i3.filter("[data-time-component=seconds]").text(s2.format("ss")), this._fillHours(), this._fillMinutes(), this._fillSeconds();
    }, i2._doAction = function(t3, e2) {
      var i3 = this._getLastPickedDate();
      if (E(t3.currentTarget).is(".disabled"))
        return false;
      switch (e2 = e2 || E(t3.currentTarget).data("action")) {
        case "next":
          var s2 = M.DatePickerModes[this.currentViewMode].NAV_FUNCTION;
          this._viewDate.add(M.DatePickerModes[this.currentViewMode].NAV_STEP, s2), this._fillDate(), this._viewUpdate(s2);
          break;
        case "previous":
          var a2 = M.DatePickerModes[this.currentViewMode].NAV_FUNCTION;
          this._viewDate.subtract(M.DatePickerModes[this.currentViewMode].NAV_STEP, a2), this._fillDate(), this._viewUpdate(a2);
          break;
        case "pickerSwitch":
          this._showMode(1);
          break;
        case "selectMonth":
          var n3 = E(t3.target).closest("tbody").find("span").index(E(t3.target));
          this._viewDate.month(n3), this.currentViewMode === this.MinViewModeNumber ? (this._setValue(i3.clone().year(this._viewDate.year()).month(this._viewDate.month()), this._getLastPickedDateIndex()), this._options.inline || this.hide()) : (this._showMode(-1), this._fillDate()), this._viewUpdate("M");
          break;
        case "selectYear":
          var o2 = parseInt(E(t3.target).text(), 10) || 0;
          this._viewDate.year(o2), this.currentViewMode === this.MinViewModeNumber ? (this._setValue(i3.clone().year(this._viewDate.year()), this._getLastPickedDateIndex()), this._options.inline || this.hide()) : (this._showMode(-1), this._fillDate()), this._viewUpdate("YYYY");
          break;
        case "selectDecade":
          var r2 = parseInt(E(t3.target).data("selection"), 10) || 0;
          this._viewDate.year(r2), this.currentViewMode === this.MinViewModeNumber ? (this._setValue(i3.clone().year(this._viewDate.year()), this._getLastPickedDateIndex()), this._options.inline || this.hide()) : (this._showMode(-1), this._fillDate()), this._viewUpdate("YYYY");
          break;
        case "selectDay":
          var d3 = this._viewDate.clone();
          E(t3.target).is(".old") && d3.subtract(1, "M"), E(t3.target).is(".new") && d3.add(1, "M");
          var h2 = d3.date(parseInt(E(t3.target).text(), 10)), p2 = 0;
          this._options.allowMultidate ? -1 !== (p2 = this._datesFormatted.indexOf(h2.format("YYYY-MM-DD"))) ? this._setValue(null, p2) : this._setValue(h2, this._getLastPickedDateIndex() + 1) : this._setValue(h2, this._getLastPickedDateIndex()), this._hasTime() || this._options.keepOpen || this._options.inline || this._options.allowMultidate || this.hide();
          break;
        case "incrementHours":
          if (!i3)
            break;
          var l2 = i3.clone().add(1, "h");
          this._isValid(l2, "h") && (this._getLastPickedDateIndex() < 0 && this.date(l2), this._setValue(l2, this._getLastPickedDateIndex()));
          break;
        case "incrementMinutes":
          if (!i3)
            break;
          var c2 = i3.clone().add(this._options.stepping, "m");
          this._isValid(c2, "m") && (this._getLastPickedDateIndex() < 0 && this.date(c2), this._setValue(c2, this._getLastPickedDateIndex()));
          break;
        case "incrementSeconds":
          if (!i3)
            break;
          var u2 = i3.clone().add(1, "s");
          this._isValid(u2, "s") && (this._getLastPickedDateIndex() < 0 && this.date(u2), this._setValue(u2, this._getLastPickedDateIndex()));
          break;
        case "decrementHours":
          if (!i3)
            break;
          var _2 = i3.clone().subtract(1, "h");
          this._isValid(_2, "h") && (this._getLastPickedDateIndex() < 0 && this.date(_2), this._setValue(_2, this._getLastPickedDateIndex()));
          break;
        case "decrementMinutes":
          if (!i3)
            break;
          var f2 = i3.clone().subtract(this._options.stepping, "m");
          this._isValid(f2, "m") && (this._getLastPickedDateIndex() < 0 && this.date(f2), this._setValue(f2, this._getLastPickedDateIndex()));
          break;
        case "decrementSeconds":
          if (!i3)
            break;
          var m2 = i3.clone().subtract(1, "s");
          this._isValid(m2, "s") && (this._getLastPickedDateIndex() < 0 && this.date(m2), this._setValue(m2, this._getLastPickedDateIndex()));
          break;
        case "togglePeriod":
          this._setValue(i3.clone().add(12 <= i3.hours() ? -12 : 12, "h"), this._getLastPickedDateIndex());
          break;
        case "togglePicker":
          var w2, g2, b2 = E(t3.target), v2 = b2.closest("a"), y2 = b2.closest("ul"), D2 = y2.find(".show"), k2 = y2.find(".collapse:not(.show)"), C2 = b2.is("span") ? b2 : b2.find("span");
          if (D2 && D2.length) {
            if ((w2 = D2.data("collapse")) && w2.transitioning)
              return true;
            D2.collapse ? (D2.collapse("hide"), k2.collapse("show")) : (D2.removeClass("show"), k2.addClass("show")), this._useFeatherIcons() ? (v2.toggleClass(this._options.icons.time + " " + this._options.icons.date), g2 = v2.hasClass(this._options.icons.time) ? this._options.icons.date : this._options.icons.time, v2.html(this._iconTag(g2))) : C2.toggleClass(this._options.icons.time + " " + this._options.icons.date), (this._useFeatherIcons() ? v2.hasClass(this._options.icons.date) : C2.hasClass(this._options.icons.date)) ? v2.attr("title", this._options.tooltips.selectDate) : v2.attr("title", this._options.tooltips.selectTime);
          }
          break;
        case "showPicker":
          this.widget.find(".timepicker > div:not(.timepicker-picker)").hide(), this.widget.find(".timepicker .timepicker-picker").show();
          break;
        case "showHours":
          this.widget.find(".timepicker .timepicker-picker").hide(), this.widget.find(".timepicker .timepicker-hours").show();
          break;
        case "showMinutes":
          this.widget.find(".timepicker .timepicker-picker").hide(), this.widget.find(".timepicker .timepicker-minutes").show();
          break;
        case "showSeconds":
          this.widget.find(".timepicker .timepicker-picker").hide(), this.widget.find(".timepicker .timepicker-seconds").show();
          break;
        case "selectHour":
          var T2 = parseInt(E(t3.target).text(), 10);
          this.use24Hours || (12 <= i3.hours() ? 12 !== T2 && (T2 += 12) : 12 === T2 && (T2 = 0)), this._setValue(i3.clone().hours(T2), this._getLastPickedDateIndex()), this._isEnabled("a") || this._isEnabled("m") || this._options.keepOpen || this._options.inline ? this._doAction(t3, "showPicker") : this.hide();
          break;
        case "selectMinute":
          this._setValue(i3.clone().minutes(parseInt(E(t3.target).text(), 10)), this._getLastPickedDateIndex()), this._isEnabled("a") || this._isEnabled("s") || this._options.keepOpen || this._options.inline ? this._doAction(t3, "showPicker") : this.hide();
          break;
        case "selectSecond":
          this._setValue(i3.clone().seconds(parseInt(E(t3.target).text(), 10)), this._getLastPickedDateIndex()), this._isEnabled("a") || this._options.keepOpen || this._options.inline ? this._doAction(t3, "showPicker") : this.hide();
          break;
        case "clear":
          this.clear();
          break;
        case "close":
          this.hide();
          break;
        case "today":
          var x2 = this.getMoment();
          this._isValid(x2, "d") && this._setValue(x2, this._getLastPickedDateIndex());
          break;
      }
      return false;
    }, i2.hide = function() {
      var t3, e2 = false;
      this.widget && (this.widget.find(".collapse").each(function() {
        var t4 = E(this).data("collapse");
        return !t4 || !t4.transitioning || !(e2 = true);
      }), e2 || (this.component && this.component.hasClass("btn") && this.component.toggleClass("active"), this.widget.hide(), E(window).off("resize", this._place), this.widget.off("click", "[data-action]"), this.widget.off("mousedown", false), this.widget.remove(), this.widget = false, void 0 !== this.input && void 0 !== this.input.val() && 0 !== this.input.val().trim().length && this._setValue(this._parseInputDate(this.input.val().trim(), { isPickerShow: false }), 0), t3 = this._getLastPickedDate(), this._notifyEvent({ type: M.Event.HIDE, date: this.unset ? null : t3 ? t3.clone() : void 0 }), void 0 !== this.input && this.input.blur(), this._viewDate = t3 ? t3.clone() : this.getMoment()));
    }, i2.show = function() {
      var t3, e2 = false;
      if (void 0 !== this.input) {
        if (this.input.prop("disabled") || !this._options.ignoreReadonly && this.input.prop("readonly") || this.widget)
          return;
        void 0 !== this.input.val() && 0 !== this.input.val().trim().length ? this._setValue(this._parseInputDate(this.input.val().trim(), { isPickerShow: true }), 0) : e2 = true;
      } else
        e2 = true;
      e2 && this.unset && this._options.useCurrent && (t3 = this.getMoment(), "string" == typeof this._options.useCurrent && (t3 = { year: function(t4) {
        return t4.month(0).date(1).hours(0).seconds(0).minutes(0);
      }, month: function(t4) {
        return t4.date(1).hours(0).seconds(0).minutes(0);
      }, day: function(t4) {
        return t4.hours(0).seconds(0).minutes(0);
      }, hour: function(t4) {
        return t4.seconds(0).minutes(0);
      }, minute: function(t4) {
        return t4.seconds(0);
      } }[this._options.useCurrent](t3)), this._setValue(t3, 0)), this.widget = this._getTemplate(), this._fillDow(), this._fillMonths(), this.widget.find(".timepicker-hours").hide(), this.widget.find(".timepicker-minutes").hide(), this.widget.find(".timepicker-seconds").hide(), this._update(), this._showMode(), E(window).on("resize", { picker: this }, this._place), this.widget.on("click", "[data-action]", E.proxy(this._doAction, this)), this.widget.on("mousedown", false), this.component && this.component.hasClass("btn") && this.component.toggleClass("active"), this._place(), this.widget.show(), void 0 !== this.input && this._options.focusOnShow && !this.input.is(":focus") && this.input.focus(), this._notifyEvent({ type: M.Event.SHOW });
    }, i2.destroy = function() {
      this.hide(), this._element.removeData(M.DATA_KEY), this._element.removeData("date");
    }, i2.disable = function() {
      this.hide(), this.component && this.component.hasClass("btn") && this.component.addClass("disabled"), void 0 !== this.input && this.input.prop("disabled", true);
    }, i2.enable = function() {
      this.component && this.component.hasClass("btn") && this.component.removeClass("disabled"), void 0 !== this.input && this.input.prop("disabled", false);
    }, i2.toolbarPlacement = function(t3) {
      if (0 === arguments.length)
        return this._options.toolbarPlacement;
      if ("string" != typeof t3)
        throw new TypeError("toolbarPlacement() expects a string parameter");
      if (-1 === T.indexOf(t3))
        throw new TypeError("toolbarPlacement() parameter must be one of (" + T.join(", ") + ") value");
      this._options.toolbarPlacement = t3, this.widget && (this.hide(), this.show());
    }, i2.widgetPositioning = function(t3) {
      if (0 === arguments.length)
        return E.extend({}, this._options.widgetPositioning);
      if ("[object Object]" !== {}.toString.call(t3))
        throw new TypeError("widgetPositioning() expects an object variable");
      if (t3.horizontal) {
        if ("string" != typeof t3.horizontal)
          throw new TypeError("widgetPositioning() horizontal variable must be a string");
        if (t3.horizontal = t3.horizontal.toLowerCase(), -1 === C.indexOf(t3.horizontal))
          throw new TypeError("widgetPositioning() expects horizontal parameter to be one of (" + C.join(", ") + ")");
        this._options.widgetPositioning.horizontal = t3.horizontal;
      }
      if (t3.vertical) {
        if ("string" != typeof t3.vertical)
          throw new TypeError("widgetPositioning() vertical variable must be a string");
        if (t3.vertical = t3.vertical.toLowerCase(), -1 === p.indexOf(t3.vertical))
          throw new TypeError("widgetPositioning() expects vertical parameter to be one of (" + p.join(", ") + ")");
        this._options.widgetPositioning.vertical = t3.vertical;
      }
      this._update();
    }, i2.widgetParent = function(t3) {
      if (0 === arguments.length)
        return this._options.widgetParent;
      if ("string" == typeof t3 && (t3 = E(t3)), null !== t3 && "string" != typeof t3 && !(t3 instanceof E))
        throw new TypeError("widgetParent() expects a string or a jQuery object parameter");
      this._options.widgetParent = t3, this.widget && (this.hide(), this.show());
    }, i2.setMultiDate = function(t3) {
      var e2 = this._options.format;
      this.clear();
      for (var i3 = 0; i3 < t3.length; i3++) {
        var s2 = moment(t3[i3], e2);
        this._setValue(s2, i3);
      }
    }, n2._jQueryHandleThis = function(t3, e2, i3) {
      var s2 = E(t3).data(M.DATA_KEY);
      if ("object" == typeof e2 && E.extend({}, M.Default, e2), s2 || (s2 = new n2(E(t3), e2), E(t3).data(M.DATA_KEY, s2)), "string" == typeof e2) {
        if (void 0 === s2[e2])
          throw new Error('No method named "' + e2 + '"');
        if (void 0 === i3)
          return s2[e2]();
        "date" === e2 && (s2.isDateUpdateThroughDateOptionFromClientCode = true);
        var a2 = s2[e2](i3);
        return s2.isDateUpdateThroughDateOptionFromClientCode = false, a2;
      }
    }, n2._jQueryInterface = function(t3, e2) {
      return 1 === this.length ? n2._jQueryHandleThis(this[0], t3, e2) : this.each(function() {
        n2._jQueryHandleThis(this, t3, e2);
      });
    }, n2;
  }(M), E(document).on(M.Event.CLICK_DATA_API, M.Selector.DATA_TOGGLE, function() {
    var t2 = E(this), e = I(t2), i2 = e.data(M.DATA_KEY);
    0 !== e.length && (i2._options.allowInputToggle && t2.is('input[data-toggle="datetimepicker"]') || x._jQueryInterface.call(e, "toggle"));
  }).on(M.Event.CHANGE, "." + M.ClassName.INPUT, function(t2) {
    var e = I(E(this));
    0 === e.length || t2.isInit || x._jQueryInterface.call(e, "_change", t2);
  }).on(M.Event.BLUR, "." + M.ClassName.INPUT, function(t2) {
    var e = I(E(this)), i2 = e.data(M.DATA_KEY);
    0 !== e.length && (i2._options.debug || window.debug || x._jQueryInterface.call(e, "hide", t2));
  }).on(M.Event.KEYDOWN, "." + M.ClassName.INPUT, function(t2) {
    var e = I(E(this));
    0 !== e.length && x._jQueryInterface.call(e, "_keydown", t2);
  }).on(M.Event.KEYUP, "." + M.ClassName.INPUT, function(t2) {
    var e = I(E(this));
    0 !== e.length && x._jQueryInterface.call(e, "_keyup", t2);
  }).on(M.Event.FOCUS, "." + M.ClassName.INPUT, function(t2) {
    var e = I(E(this)), i2 = e.data(M.DATA_KEY);
    0 !== e.length && i2._options.allowInputToggle && x._jQueryInterface.call(e, "show", t2);
  }), E.fn[M.NAME] = x._jQueryInterface, E.fn[M.NAME].Constructor = x, E.fn[M.NAME].noConflict = function() {
    return E.fn[M.NAME] = t, x._jQueryInterface;
  };
  function I(t2) {
    var e, i2 = t2.data("target");
    return i2 || (i2 = t2.attr("href") || "", i2 = /^#[a-z]/i.test(i2) ? i2 : null), 0 === (e = E(i2)).length ? t2 : (e.data(M.DATA_KEY) || E.extend({}, e.data(), E(this).data()), e);
  }
}();
/*! Bundled license information:

admin-lte/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js:
  (*!@preserve
   * Tempus Dominus Bootstrap4 v5.39.0 (https://tempusdominus.github.io/bootstrap-4/)
   * Copyright 2016-2020 Jonathan Peterson and contributors
   * Licensed under MIT (https://github.com/tempusdominus/bootstrap-3/blob/master/LICENSE)
   *)
*/
//# sourceMappingURL=admin-lte_plugins_tempusdominus-bootstrap-4_js_tempusdominus-bootstrap-4__min__js.js.map
